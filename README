SYNOPSIS

        use API::Wunderlist;
    
        my $wunderlist = API::Wunderlist->new(
            client_id    => 'CLIENT_ID',
            access_token => 'ACCESS_TOKEN',
            identifier   => 'APPLICATION (yourname@example.com)',
        );
    
        my $list = $wunderlist->lists('12345');
        my $results = $list->fetch;
    
        # after some introspection
    
        $list->delete;

DESCRIPTION

    This distribution provides an object-oriented thin-client library for
    interacting with the Wunderlist (https://wunderlist.com) API. For usage
    and documentation information visit
    https://developer.wunderlist.com/documentation.

THIN CLIENT

    A thin-client library is advantageous as it has complete coverage and
    can easily adapt to changes in the API with minimal effort. As a
    thin-client library, this module does not map specific HTTP requests to
    specific routines nor does it provide parameter validation, pagination,
    or other conventions found in typical API client implementations,
    instead, it simply provides a simple and consistent mechanism for
    dynamically generating HTTP requests. Additionally, this module has
    support for debugging and retrying API calls as well as throwing
    exceptions when 4xx and 5xx server response codes are received.

 Building

        my $list = $wunderlist->lists('12345');
    
        $list->action; # GET /lists/12345
        $list->action('head'); # HEAD /lists/12345

    Building up an HTTP request object is extremely easy, simply call
    method names which correspond to the API's path segments in the
    resource you wish to execute a request against. This module uses
    autoloading and returns a new instance with each method call. The
    following is the equivalent:

        my $list = $wunderlist->resource(lists => '12345');
    
        # then
    
        $list->action('put', %args); # PUT /lists/12345

    Because each call returns a new API instance configured with a resource
    locator based on the supplied parameters, reuse and request isolation
    are made simple, i.e., you will only need to configure the client once
    in your application.

 Fetching

        my $lists = $wunderlist->lists;
    
        $lists->fetch(
            query => {
                # query-string parameters
            },
        );
    
        # equivalent to
    
        $wunderlist->resource('lists')->action(
            get => ( query => { ... } )
        );

    This example illustrates how you might fetch an API resource.

 Creating

        my $lists = $wunderlist->lists;
    
        $lists->create(
            data => {
                # content-body parameters
            },
            query => {
                # query-string parameters
            },
        );
    
        # or
    
        my $lists = $wunderlist->lists;
    
        $lists->create(...);
    
        # equivalent to
    
        $wunderlist->resource('lists')->action(
            post => ( query => { ... }, data => { ... } )
        );

    This example illustrates how you might create a new API resource.

 Updating

        my $lists = $wunderlist->lists;
        my $list  = $lists->resource('12345');
    
        $list->update(
            data => {
                # content-body parameters
            },
            query => {
                # query-string parameters
            },
        );
    
        # or
    
        my $list = $wunderlist->lists('12345');
    
        $list->update(...);
    
        # equivalent to
    
        $wunderlist->resource('lists')->action(
            put => ( query => { ... }, data => { ... } )
        );

    This example illustrates how you might update a new API resource.

 Deleting

        my $lists = $wunderlist->lists;
        my $list  = $lists->resource('12345');
    
        $list->delete(
            data => {
                # content-body parameters
            },
            query => {
                # query-string parameters
            },
        );
    
        # or
    
        my $list = $wunderlist->lists('12345');
    
        $list->delete(...);
    
        # equivalent to
    
        $wunderlist->resource('lists')->action(
            delete => ( query => { ... }, data => { ... } )
        );

    This example illustrates how you might delete an API resource.

 Transacting

        my $list = $wunderlist->resource('lists', '12345');
    
        my ($results, $transaction) = $list->fetch(...);

    This example illustrates how you can access the transaction object used
    to submit the HTTP request.

        $wunderlist->access_token;
        $wunderlist->access_token('ACCESS_TOKEN');

    The access_token parameter should be set to an Access-Token associated
    with your Client-ID.

        $wunderlist->client_id;
        $wunderlist->client_id('CLIENT_ID');

    The client_id parameter should be set to the Client-ID of your app.

        $wunderlist->identifier;
        $wunderlist->identifier('IDENTIFIER');

    The identifier parameter should be set to a string that identifies your
    app.

        $wunderlist->debug;
        $wunderlist->debug(1);

    The debug attribute if true prints HTTP requests and responses to
    standard out.

        $wunderlist->fatal;
        $wunderlist->fatal(1);

    The fatal attribute if true promotes 4xx and 5xx server response codes
    to exceptions, a API::Wunderlist::Exception object.

        $wunderlist->retries;
        $wunderlist->retries(10);

    The retries attribute determines how many times an HTTP request should
    be retried if a 4xx or 5xx response is received. This attribute
    defaults to 1.

        $wunderlist->timeout;
        $wunderlist->timeout(5);

    The timeout attribute determines how long an HTTP connection should be
    kept alive. This attribute defaults to 10.

        $wunderlist->url;
        $wunderlist->url(Mojo::URL->new('https://a.wunderlist.com'));

    The url attribute set the base/pre-configured URL object that will be
    used in all HTTP requests. This attribute expects a Mojo::URL object.

        $wunderlist->user_agent;
        $wunderlist->user_agent(Mojo::UserAgent->new);

    The user_agent attribute set the pre-configured UserAgent object that
    will be used in all HTTP requests. This attribute expects a
    Mojo::UserAgent object.

        my $result = $wunderlist->action($verb, %args);
    
        # e.g.
    
        $wunderlist->action('head', %args);   # HEAD request
        $wunderlist->action('optons', %args); # OPTIONS request
        $wunderlist->action('patch', %args);  # PATCH request

    The action method issues a request to the API resource represented by
    the object. The first parameter will be used as the HTTP request
    method. The arguments, expected to be a list of key/value pairs, will
    be included in the request if the key is either data or query.

        my $results = $wunderlist->create(%args);
    
        # or
    
        $wunderlist->POST(%args);

    The create method issues a POST request to the API resource represented
    by the object. The arguments, expected to be a list of key/value pairs,
    will be included in the request if the key is either data or query.

        my $results = $wunderlist->delete(%args);
    
        # or
    
        $wunderlist->DELETE(%args);

    The delete method issues a DELETE request to the API resource
    represented by the object. The arguments, expected to be a list of
    key/value pairs, will be included in the request if the key is either
    data or query.

        my $results = $wunderlist->fetch(%args);
    
        # or
    
        $wunderlist->GET(%args);

    The fetch method issues a GET request to the API resource represented
    by the object. The arguments, expected to be a list of key/value pairs,
    will be included in the request if the key is either data or query.

        my $results = $wunderlist->update(%args);
    
        # or
    
        $wunderlist->PUT(%args);

    The update method issues a PUT request to the API resource represented
    by the object. The arguments, expected to be a list of key/value pairs,
    will be included in the request if the key is either data or query.

        $wunderlist->avatars;

    The avatar method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/avatar.

        $wunderlist->files;

    The file method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/file.

        $wunderlist->lists;

    The list method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/list.

        $wunderlist->memberships;

    The membership method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/membership.

        $wunderlist->notes;

    The note method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/note.

        $wunderlist->positions;

    The positions method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/positions.

        $wunderlist->reminders;

    The reminder method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/reminder.

        $wunderlist->subtasks;

    The subtask method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/subtask.

        $wunderlist->tasks;

    The task method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/task.

        $wunderlist->uploads;

    The upload method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/upload.

        $wunderlist->users;

    The user method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/user.

        $wunderlist->webhooks;

    The webhooks method returns a new instance representative of the API
    resource requested. This method accepts a list of path segments which
    will be used in the HTTP request. The following documentation can be
    used to find more information.
    https://developer.wunderlist.com/documentation/endpoints/webhooks.

POD ERRORS

    Hey! The above document had some coding errors, which are explained
    below:

    Around line 170:

      Unknown directive: =param

    Around line 178:

      Unknown directive: =param

    Around line 185:

      Unknown directive: =param

    Around line 192:

      Unknown directive: =attr

    Around line 199:

      Unknown directive: =attr

    Around line 207:

      Unknown directive: =attr

    Around line 215:

      Unknown directive: =attr

    Around line 223:

      Unknown directive: =attr

    Around line 231:

      Unknown directive: =attr

    Around line 239:

      Unknown directive: =method

    Around line 255:

      Unknown directive: =method

    Around line 267:

      Unknown directive: =method

    Around line 279:

      Unknown directive: =method

    Around line 291:

      Unknown directive: =method

    Around line 303:

      Unknown directive: =resource

    Around line 312:

      Unknown directive: =resource

    Around line 321:

      Unknown directive: =resource

    Around line 330:

      Unknown directive: =resource

    Around line 339:

      Unknown directive: =resource

    Around line 348:

      Unknown directive: =resource

    Around line 357:

      Unknown directive: =resource

    Around line 366:

      Unknown directive: =resource

    Around line 375:

      Unknown directive: =resource

    Around line 384:

      Unknown directive: =resource

    Around line 393:

      Unknown directive: =resource

    Around line 402:

      Unknown directive: =resource

